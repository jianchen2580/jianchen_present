容器文件系统与安全
23 June 2017
Tags: Docker, Filesystem, Namespace

Jian Chen
@sevenj2580

* About me

- 2014年开始使用docker
- Cisco SRE

.image gopher-mat.png

* Overview

- 容器隔离 - Linux Namespaces
- 容器隔离 - Control Groups
- 容器安全

* 容器隔离 - Linux Namespaces
- Precess-level

* Linux Namespaces

    chroot - In UNIX, everything is a file.


.image gopher-mat.png

* Linux Namespaces

chroot系统调用（通过修改根目录把用户jail到一个特定目录下）
chroot提供了一种简单的隔离模式：chroot内部的文件系统无法访问外部的内容
Linux Namespace是Linux提供的一种内核级别环境隔离的方法
Linux Namespace提供了对UTS、IPC、mount、PID、network、User等的隔离机制。

* Linux Namespaces

- Mount namespaces CLONE_NEWNS Linux 2.4.19
- UTS namespaces CLONE_NEWUTS Linux 2.6.19
- IPC namespaces CLONE_NEWIPC Linux 2.6.19
- PID namespaces CLONE_NEWPID Linux 2.6.24
- Network namespaces CLONE_NEWNET Linux 2.6.24, completed in 2.6.29
- User namespaces CLONE_NEWUSER Linux 2.6.23, completed in 3.8

* Namespace - 系统调用

clone() – 用来创建一个新的进程，并可以通过设计上述参数达到隔离。
unshare() – 使某进程脱离某个namespace
setns() – 把某进程加入到某个namespace

* clone - UTS Namespace

.code namespace_uts.c

* Namespace - UTS 

    hchen@ubuntu:~$ sudo ./uts
    Parent - start a container!
    Container - inside the container!
    root@container:~# hostname
    container
    root@container:~# uname -n
    container

* Namespace - IPC

- IPC(Inter-Process Communication)，是Unix/Linux下进程间通信的一种方式，IPC有共享内存、信号量、消息队列等方法。
- IPC需要一个全局的ID
- 启动IPC隔离需要在clone系统调用加上CLONE_NEWIPC

* Namespace - IPC

.code namespace_ipc.c

* Namespace - PID

.code namespace_pid.c

* Namespace - PID

- init PID为1，作为所有进程的父进程
- shell里输入ps,top等，依然可以在看到宿主机上的进程，／proc
- 需要文件系统隔离

* Namespace - Mount